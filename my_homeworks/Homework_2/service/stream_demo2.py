import streamlit as st
import pandas as pd

# @st.cache_data
def get_data_movie_final():
     return pd.read_csv('./data/clean_data/movie_emotion.csv')


st.set_page_config(layout="wide")
df_data = get_data_movie_final()


#–î–µ–ª–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–ª–∞—à–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞
st.sidebar.header('Select film to display')
movie_title = df_data['movie_title'].unique().tolist()
movie_title_selected = st.sidebar.multiselect('Movie title', movie_title)

#—Å–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏–ª—å–º–∞
mask_movie_title = df_data['movie_title'].isin(movie_title_selected)

#–Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–∞—Å–∫—É —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏–ª—å–º–∞
df_data_filtered = df_data[mask_movie_title]
# st.write(df_data_filtered)

#–î–µ–ª–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–ª–∞—à–∫–∏ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
st.sidebar.header('Select dialog to display')
speaker_name = df_data_filtered['names'].unique().tolist()
speaker_name_selected = st.sidebar.multiselect('Speaker name', speaker_name)

#—Å–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä—Å–∞
mask_speaker_name = df_data['names'].isin(speaker_name_selected)
#–Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–∞—Å–∫—É —Å –≤—ã–±–æ—Ä–æ–º —Ñ–∏–ª—å–º
df_data_filtered1 = df_data[mask_speaker_name & mask_movie_title]
# st.write(df_data_filtered1)



st.title('–ó–∞–¥–∞–Ω–∏–µ 2.2 \n ### üìö –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏')


def convert(string):
    li = [item.split(',') for item in string]
    return li

st.write(
        """
        –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏ –¥–∏–∞–ª–æ–≥!! - –ø–æ–∫–∞ –æ—à–∏–±–∫–∞ —Å–Ω–∏–∑—É
        """
    )
df_data = df_data_filtered1
data = df_data['replics'].to_list()
data = convert(data)

st.write("## –í—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã, –≤–æ—Ç –≤–∞—à –¥–∏–∞–ª–æ–≥!", data[0])


# @st.cache_data
def data_updater():
    if "annotations" not in st.session_state:
        st.session_state.annotations = {}
    if "data" not in st.session_state:
        st.session_state.data = data[0].copy()
        st.session_state.current_text = st.session_state.data[1]
        st.session_state.prev_text = st.session_state.data[0]


data_updater()


def annotate(label):
    st.session_state.annotations[st.session_state.current_text] = label
    if st.session_state.data:
        st.session_state.prev_text = st.session_state.data[0]
        try:
            st.session_state.current_text = st.session_state.data[1]
        except IndexError:
            pass

        st.session_state.data.remove(st.session_state.prev_text)

st.write("")
col1, col2 = st.columns(2)
with col1:
    if st.session_state.data:
        st.write(
            "Annotated:",
            len(st.session_state.annotations),
            "‚Äì Remaining:",
            len(st.session_state.data),
        )
        st.write("### Text")
        st.write('–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ä–µ–ø–ª–∏–∫–∞:', st.session_state.prev_text)
        st.write('–¢–µ–∫—É—â–∞—è —Ä–µ–ø–ª–∏–∫–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É:', st.session_state.current_text)
        st.button("Positive üòÑ", on_click=annotate, args=("positive",))
        st.button("Negative üòû", on_click=annotate, args=("negative",))
        st.button("Neutral üòê", on_click=annotate, args=("neutral",))
    else:
        st.success(
            f"üéâ Done! All {len(st.session_state.annotations)} texts annotated."
        )
with col2:
    st.write("### Annotations")
    st.write(st.session_state.annotations)
